1. Цель
Каждый программный продукт должен выполнять одну или несколько ключевых задач. От приложения с гео-картами мы ожидаем точной ориентации в пространстве, от сайта интернет-магазина ― корректного поиска товаров по заданным параметрам и т. д. Но те же программные продукты мы можем протестировать и с точки зрения дизайна.
Таким образом, анализ ПО с позиции его ключевых или вспомогательных функций определяет тип тестирования:

    • Функциональное
    • Нефункциональное
      
Функциональное тестирование направлено на проверку того, какие функции ПО реализованы, и того, насколько верно они реализованы.

Нефункциональное – проверка корректности работы нефункциональных требований. Оценивается, КАК программный продукт работает. Эта проверка включает в себя следующие виды:

    • Тестирование производительности – работа ПО под определённой нагрузкой.
    • Тестирование пользовательского интерфейса – удобство пользователя при взаимодействии с разными параметрами интерфейса (кнопки, цвета, выравнивание и т. д.).
    • Тестирование UX – правильность логики использования программного продукта.
    • Тестирование защищенности – определение безопасности ПО: защищено ли оно от атак хакеров, несанкционированного доступа к данным и т. д.
    • Инсталляционное тестирование – оценка вероятности возникновения проблем при установке, удалении, а также обновлении ПО.
    • Тестирование совместимости – тестирование работы программного продукта в определённом окружении.
    • Тестирование надежности – работа программы при длительной средней ожидаемой нагрузке.
    • Тестирование локализации –оценка правильности версии программного продукта (языковой и культурный аспекты).

2. Степень автоматизации
В зависимости от того, используют ли тестировщики дополнительные программные средства для тестирования приложений или программ, тестирование бывает:

    • Мануальное (ручное) – без использования дополнительных программных средств, т. е. «вручную».
    • Автоматизированное – с использованием программных средств (более детально в описании курса по автоматизации тестирования ПО).

3. Позитивность сценария
Этот подход определяет поведение системы в привычных и экстремальных условиях.

    • Позитивная проверка – оценка ожидаемого поведения. Это тестирование проводится в первую очередь, ведь позволяет определить корректность работы программы.
    • Негативная – определение устойчивости системы в нестандартной ситуации. Например, неожиданный сценарий взаимодействия пользователя с интерфейсом.
Эти типы тестирования нередко проводятся параллельно. Ведь работая над некоторой функциональностью, тестировщику проще оценить её поведение и в стандартных, и в нестандартных условиях.

4. Доступ к коду программного продукта

В процессе тестирования инженер может работать с ПО, не обращаясь к его коду, а может определить правильность работы, взглянув на код. По доступу к коду программного продукта тестирование делится на:

    • Тестирование «белого ящика» – с доступом к коду.
    • Тестирование «черного ящика» – без доступа к коду продукта.
    • Тестирование «серого ящика» – на основе ограниченного знания внутренней структуры ПО. Часто говорят, что это смесь тестирования «белого ящика» и «чёрного ящика», но это в корне неверно. В данном случае тестировщик не работает с кодом программного продукта, но он знаком с внутренней структурой программы и взаимодействием между компонентами.

5. Уровень
Этот пункт определяет объект тестирования.

    • Модульное / юнит-тестирование – проверка корректной работы отдельных единиц ПО, модулей. Этот вид тестирования могут выполнять сами разработчики.
    • Интеграционное тестирование – проверка взаимодействия между несколькими единицами ПО.
    • Системное – проверка работы приложения целиком.
    • Приёмочное – оценка соответствия заявленным требованиям к программному продукту.
Переход на каждую новую ступень – движение от микроуровня к макро. Это важный этап тестирования, ведь безошибочно написанные модули могут просто не работать вместе.


6. Исполнитель
От объекта тестирования движемся к его субъекту. Вы могли слышать об альфа- и бета-тестировании. А поучаствовать в одном из них можно, даже не будучи тестировщиком. Итак, по исполнителю тестирование делится на:

    • Альфа-тестирование – проверка программного продукта на поздней стадии разработки. Проводится разработчиками или тестировщиками.
    • Бета-тестирование – оценка ПО перед выходом на рынок в фокус-группе или добровольцами. Отзывы собираются, анализируются и учитываются при внесении правок.

7. Формальность
Этот пункт определяет подготовленность тестировщика перед началом проверки.
    • Тестирование по тестам – использование написанных заранее тест-кейсов.
    • Исследовательское тестирование – одновременная разработка тестов и их использование.
    • Свободное тестирование – проверка качества без разработки тестов и написания документации. Основывается на интуиции и опыте тестировщика.

8. Важность
    • Дымовое тестирование – проверка самой важной функциональности программного продукта.
    • Тестирование критического пути – проверка функциональности, используемой типичными пользователями в повседневной деятельности.
    • Расширенное тестирование – проверка всей заявленной функциональности.


Регрессионное тестирование – это набор тестов, направленных на обнаружение дефектов в уже протестированных участках приложения. Делается это совсем не для того, чтобы окончательно убедиться в отсутствии багов, а для поиска и исправления регрессионных ошибок. Регрессионные ошибки – те же баги, но появляются они не при написании программы, а при добавлении в существующий билд нового участка программы или исправлении других багов, что и стало причиной возникновения новых дефектов в уже протестированном продукте.
Таким образом, мы можем сказать, что цель регрессионного тестирования – убедиться, что исправление одних багов не стало причиной возникновения других и что обновление билда не создало новых дефектов в уже проверенном коде.


Есть несколько видов регрессионных тестов:
• Верификационные тесты. Проводиться для проверки исправления обнаруженного и открытого ранее бага.
• Тестирование верификации версии. Содержит принципы дымного тестирования и тестирование сборки: проверка работоспособности основной функциональности программы в каждой новой сборке.
• Непосредственно само регрессионное тестирование – повторное выполнение всех тестов, которые были написаны и проведены ранее. Они выполняются по уже существующим тест-кейсам независимо от того, были в ходе их прохождения найдены баги, или нет.
• Тестирование в новом билде уже исправленных багов в старых билдах. Это выполняется для того, чтобы проверить, не возобновило ли обновление билда старых дефектов.
Некоторые положения относительно того, как проводить регрессионное тестирование:
• Данный вид тестирования проводится в каждом новом билде.
• Начинать нужно с верификации версии (тестирование сборки и дымное тестирование).
• Проверка исправленных багов.
• Регрессионное тестирование, в основном, не покрывает все приложение, а только те участки, которые тем или иным способом «соприкасаются» с изменениями в билде.
Далее тестируются уже закрытые ранее баги.
1) Регрессионное тестирование рекомендуется проводить несколько раз (3-5). Поэтому, с целью экономии драгоценного времени (и, может быть, для избавления от «рутинности») в регрессионных тестах активно используют мощь автоматизации тестирования.
2) Проведение финального регрессионного тестирования, для которого отбираются тесты по приоритету, определяемому наибольшим количеством найденных ошибок.
Также регрессионное тестирование активно используется в экстремальной разработке.

