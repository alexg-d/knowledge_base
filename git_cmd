$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com - указываем имя и емейл

$ git config --global init.defaultBranch main - называем главную ветку другим именем

$ git config --list - смотрим текущие настройки в конфиге

$ git init - инициализируем папку, в которой находимся, как репозиторий
либо
$ git clone https://github.com/libgit2/libgit2 - клонируем уже сущестующий репозиторий

$ git status - проверить в каком состоянии находятся файлы

новые/не добавленные файлы отмечаются как untracked files
новые - new file
измененные - modified

$ git add <file> - начать отслеживать файл. Пометится как "Changes to be committed"

$ git diff - показывает содеержимое фалов + доп. данные, что изменено, но не проиндексировано

$ git commit - коммит всех индексированных файлов. Не добавленные (add) не будут коммититься
$ git commit - a - игнорировать индексацию


---------------------------------

.gitignore - в файл перечисляются шаблоны файлов, которые не будут добавляться в репу + всегда будут неотслеживаемыми

Примеры:
# Исключить все файлы с расширение .a
*.a

# Но отслеживать файл lib.a даже если он подпадает под исключение выше
!lib.a

# Исключить файл TODO в корневом каталоге, но не файл в subdir/TODO
/TODO

# Игнорировать все файлы в каталоге build/
build/

# Игнорировать файл doc/notes.txt, но не файл doc/server/arch.txt
doc/*.txt

# Игнорировать все .txt файлы в каталоге doc/
doc/**/*.txt

Символ (*) соответствует 0 или более символам; последовательность [abc] — любому символу из указанных в скобках (в данном примере a, b или c); знак вопроса (?) соответствует одному символу; и квадратные скобки, в которые заключены символы, разделённые дефисом ([0-9]), соответствуют любому символу из интервала (в данном случае от 0 до 9). Вы также можете использовать две звёздочки, чтобы указать на вложенные каталоги: a/**/z соответствует a/z, a/b/z, a/b/c/z, и так далее.

-----------------------------------

$ git rm - удалить файл из рабочего каталога
$ git rm --cached - оставить файл на жестком диске, но перестать остлеживать изменения в нём

$ git mv - переместить / переименовать файл

$ git log - история коммитов
$ git log -p -2 - (--patch) показывает разницу, внесенную в каждый коммит. -2 для вывода только 2 записей
$ git log --stat - печатает под каждым коммитом список и кол-во изм. файлов, а также доб. и уд. строки
$ git log --pretty=oneline/short/full/fuller - вывод в разных форматах отображения
$ git log --pretty=format:"%h - %an, %ar : %s" - format позволяет явно указать формат вывода
--graph - показывает текущую ветку и историю слияний


$ git commit --amend - позволяет заменить результаты последнего коммита (если что-то забыл, например)

$ git restore --staged <file>
$ git reset HEAD <file> - отменяет индексацию

$ git checkout -- <file>
$ git restore <file> - отменяет последние изменения

$ git remote (-v) - вывести названия доступных удаленных репозиториев

удаленный репозиторий - зеркало существующего реп-я в моей системе
$ git remote add test https://github.com/kagal4yk/git-test2 - добавить удаленный репозиторий
$ git fetch <rep_name>
$ git remote remove <name> - удалить удаленный репозиторий


$ git fetch - получить все изменения с сервера, которых нет в текущей ветке. Сохранить в локальном репе
$ git merge - слить все изменения в локальную копию
$ git pull - сразу получить и слить все коммиты с сервера в локальную репу
$ git push - отправить коммиты на сервер

$ git remote show <name> - получить инфу об удаленном репозитории
